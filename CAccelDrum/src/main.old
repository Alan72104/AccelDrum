// Basic demo for accelerometer readings from Adafruit MPU6050

#include <Adafruit_MPU6050.h>
#include <Adafruit_Sensor.h>
#include <Wire.h>
#include <I2CScanner.h>

constexpr int LED_PIN = 2;
Adafruit_MPU6050 mpu;

void setup(void) {
    Serial.begin(1152000);
    while (!Serial)
        delay(10); // will pause Zero, Leonardo, etc until serial console opens

  // {
  //   I2CScanner scanner;
  //   scanner.Init();
  //   scanner.Scan();
  // }

  // Serial.println("Adafruit MPU6050 test!");

  // Try to initialize!
    if (!mpu.begin()) {
    // Serial.println("Failed to find MPU6050 chip");
        while (1) {
            delay(10);
        }
    }
  // Serial.println("MPU6050 Found!");

  // Serial.print("Accelerometer range set to: ");
  // switch (mpu.getAccelerometerRange()) {
  // case MPU6050_RANGE_2_G:
  //   Serial.println("+-2G");
  //   break;
  // case MPU6050_RANGE_4_G:
  //   Serial.println("+-4G");
  //   break;
  // case MPU6050_RANGE_8_G:
  //   Serial.println("+-8G");
  //   break;
  // case MPU6050_RANGE_16_G:
  //   Serial.println("+-16G");
  //   break;
  // }
  // Serial.print("Gyro range set to: ");
  // switch (mpu.getGyroRange()) {
  // case MPU6050_RANGE_250_DEG:
  //   Serial.println("+- 250 deg/s");
  //   break;
  // case MPU6050_RANGE_500_DEG:
  //   Serial.println("+- 500 deg/s");
  //   break;
  // case MPU6050_RANGE_1000_DEG:
  //   Serial.println("+- 1000 deg/s");
  //   break;
  // case MPU6050_RANGE_2000_DEG:
  //   Serial.println("+- 2000 deg/s");
  //   break;
  // }

  // Serial.print("Filter bandwidth set to: ");
  // switch (mpu.getFilterBandwidth()) {
  // case MPU6050_BAND_260_HZ:
  //   Serial.println("260 Hz");
  //   break;
  // case MPU6050_BAND_184_HZ:
  //   Serial.println("184 Hz");
  //   break;
  // case MPU6050_BAND_94_HZ:
  //   Serial.println("94 Hz");
  //   break;
  // case MPU6050_BAND_44_HZ:
  //   Serial.println("44 Hz");
  //   break;
  // case MPU6050_BAND_21_HZ:
  //   Serial.println("21 Hz");
  //   break;
  // case MPU6050_BAND_10_HZ:
  //   Serial.println("10 Hz");
  //   break;
  // case MPU6050_BAND_5_HZ:
  //   Serial.println("5 Hz");
  //   break;
  // }

    // Serial.println("");
    // mpu.setInterruptPinLatch
    mpu.setAccelerometerRange(MPU6050_RANGE_8_G);
    mpu.setGyroRange(MPU6050_RANGE_500_DEG);
    mpu.setFilterBandwidth(MPU6050_BAND_5_HZ);
    mpu.setTemperatureStandby(true);

    pinMode(LED_BUILTIN, OUTPUT);
    delay(50);
}

constexpr uint64_t oneSecMicros = 1000000;
uint64_t lastUpdate = 0;
uint64_t lastLedBlink = 0;
uint64_t lastPrint = 0;
bool ledState = false;

void loop() {
    const uint32_t magic = 0xDEADBEFF;

    sensors_event_t a, g, temp;
    mpu.getEvent(&a, &g, &temp);

    uint64_t micro = micros();
    uint64_t dMicro = micro - lastUpdate;
    lastUpdate = micro;

    if (micro - lastLedBlink >= oneSecMicros)
    {
        lastLedBlink = micro;
        digitalWrite(LED_BUILTIN, ledState = true);
    }
    else if (ledState)
        digitalWrite(LED_BUILTIN, ledState = false);

    if (lastUpdate == 0)
        dMicro = 0;

    bool writeRaw = false;
    writeRaw = true;
    if (writeRaw)
    {
        Serial.write((byte*)&dMicro, sizeof(dMicro));
        Serial.write((byte*)&a.acceleration.v, sizeof(a.acceleration.v));
        Serial.write((byte*)&g.gyro.v, sizeof(g.gyro.v));
        Serial.write((byte*)&magic, sizeof(magic));
    }
    else
    {
        // "-12.34"
        if (micro - lastPrint >= oneSecMicros / 10)
        {
            lastPrint = micro;
            Serial.printf("Acceleration: % 6.2f, % 6.2f, % 6.2f m/s^2, rotation: % 6.2f, % 6.2f, % 6.2f rad/s\n",
                a.acceleration.x,
                a.acceleration.y,
                a.acceleration.z,
                a.gyro.x,
                a.gyro.y,
                a.gyro.z
            );
        }
    }
}